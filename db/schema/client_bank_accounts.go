// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ClientBankAccount is an object representing the database table.
type ClientBankAccount struct {
	ID            []byte    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ClientID      []byte    `boil:"client_id" json:"client_id" toml:"client_id" yaml:"client_id"`
	Name          string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	BranchName    string    `boil:"branch_name" json:"branch_name" toml:"branch_name" yaml:"branch_name"`
	AccountNumber string    `boil:"account_number" json:"account_number" toml:"account_number" yaml:"account_number"`
	AccountName   string    `boil:"account_name" json:"account_name" toml:"account_name" yaml:"account_name"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *clientBankAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L clientBankAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClientBankAccountColumns = struct {
	ID            string
	ClientID      string
	Name          string
	BranchName    string
	AccountNumber string
	AccountName   string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "id",
	ClientID:      "client_id",
	Name:          "name",
	BranchName:    "branch_name",
	AccountNumber: "account_number",
	AccountName:   "account_name",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var ClientBankAccountTableColumns = struct {
	ID            string
	ClientID      string
	Name          string
	BranchName    string
	AccountNumber string
	AccountName   string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "client_bank_accounts.id",
	ClientID:      "client_bank_accounts.client_id",
	Name:          "client_bank_accounts.name",
	BranchName:    "client_bank_accounts.branch_name",
	AccountNumber: "client_bank_accounts.account_number",
	AccountName:   "client_bank_accounts.account_name",
	CreatedAt:     "client_bank_accounts.created_at",
	UpdatedAt:     "client_bank_accounts.updated_at",
}

// Generated where

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ClientBankAccountWhere = struct {
	ID            whereHelper__byte
	ClientID      whereHelper__byte
	Name          whereHelperstring
	BranchName    whereHelperstring
	AccountNumber whereHelperstring
	AccountName   whereHelperstring
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
}{
	ID:            whereHelper__byte{field: "\"client_bank_accounts\".\"id\""},
	ClientID:      whereHelper__byte{field: "\"client_bank_accounts\".\"client_id\""},
	Name:          whereHelperstring{field: "\"client_bank_accounts\".\"name\""},
	BranchName:    whereHelperstring{field: "\"client_bank_accounts\".\"branch_name\""},
	AccountNumber: whereHelperstring{field: "\"client_bank_accounts\".\"account_number\""},
	AccountName:   whereHelperstring{field: "\"client_bank_accounts\".\"account_name\""},
	CreatedAt:     whereHelpertime_Time{field: "\"client_bank_accounts\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"client_bank_accounts\".\"updated_at\""},
}

// ClientBankAccountRels is where relationship names are stored.
var ClientBankAccountRels = struct {
	Client string
}{
	Client: "Client",
}

// clientBankAccountR is where relationships are stored.
type clientBankAccountR struct {
	Client *Client `boil:"Client" json:"Client" toml:"Client" yaml:"Client"`
}

// NewStruct creates a new relationship struct
func (*clientBankAccountR) NewStruct() *clientBankAccountR {
	return &clientBankAccountR{}
}

func (r *clientBankAccountR) GetClient() *Client {
	if r == nil {
		return nil
	}
	return r.Client
}

// clientBankAccountL is where Load methods for each relationship are stored.
type clientBankAccountL struct{}

var (
	clientBankAccountAllColumns            = []string{"id", "client_id", "name", "branch_name", "account_number", "account_name", "created_at", "updated_at"}
	clientBankAccountColumnsWithoutDefault = []string{"id", "client_id", "name", "branch_name", "account_number", "account_name", "created_at", "updated_at"}
	clientBankAccountColumnsWithDefault    = []string{}
	clientBankAccountPrimaryKeyColumns     = []string{"id"}
	clientBankAccountGeneratedColumns      = []string{}
)

type (
	// ClientBankAccountSlice is an alias for a slice of pointers to ClientBankAccount.
	// This should almost always be used instead of []ClientBankAccount.
	ClientBankAccountSlice []*ClientBankAccount
	// ClientBankAccountHook is the signature for custom ClientBankAccount hook methods
	ClientBankAccountHook func(context.Context, boil.ContextExecutor, *ClientBankAccount) error

	clientBankAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	clientBankAccountType                 = reflect.TypeOf(&ClientBankAccount{})
	clientBankAccountMapping              = queries.MakeStructMapping(clientBankAccountType)
	clientBankAccountPrimaryKeyMapping, _ = queries.BindMapping(clientBankAccountType, clientBankAccountMapping, clientBankAccountPrimaryKeyColumns)
	clientBankAccountInsertCacheMut       sync.RWMutex
	clientBankAccountInsertCache          = make(map[string]insertCache)
	clientBankAccountUpdateCacheMut       sync.RWMutex
	clientBankAccountUpdateCache          = make(map[string]updateCache)
	clientBankAccountUpsertCacheMut       sync.RWMutex
	clientBankAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var clientBankAccountAfterSelectHooks []ClientBankAccountHook

var clientBankAccountBeforeInsertHooks []ClientBankAccountHook
var clientBankAccountAfterInsertHooks []ClientBankAccountHook

var clientBankAccountBeforeUpdateHooks []ClientBankAccountHook
var clientBankAccountAfterUpdateHooks []ClientBankAccountHook

var clientBankAccountBeforeDeleteHooks []ClientBankAccountHook
var clientBankAccountAfterDeleteHooks []ClientBankAccountHook

var clientBankAccountBeforeUpsertHooks []ClientBankAccountHook
var clientBankAccountAfterUpsertHooks []ClientBankAccountHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ClientBankAccount) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientBankAccountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ClientBankAccount) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientBankAccountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ClientBankAccount) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientBankAccountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ClientBankAccount) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientBankAccountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ClientBankAccount) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientBankAccountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ClientBankAccount) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientBankAccountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ClientBankAccount) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientBankAccountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ClientBankAccount) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientBankAccountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ClientBankAccount) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientBankAccountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddClientBankAccountHook registers your hook function for all future operations.
func AddClientBankAccountHook(hookPoint boil.HookPoint, clientBankAccountHook ClientBankAccountHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		clientBankAccountAfterSelectHooks = append(clientBankAccountAfterSelectHooks, clientBankAccountHook)
	case boil.BeforeInsertHook:
		clientBankAccountBeforeInsertHooks = append(clientBankAccountBeforeInsertHooks, clientBankAccountHook)
	case boil.AfterInsertHook:
		clientBankAccountAfterInsertHooks = append(clientBankAccountAfterInsertHooks, clientBankAccountHook)
	case boil.BeforeUpdateHook:
		clientBankAccountBeforeUpdateHooks = append(clientBankAccountBeforeUpdateHooks, clientBankAccountHook)
	case boil.AfterUpdateHook:
		clientBankAccountAfterUpdateHooks = append(clientBankAccountAfterUpdateHooks, clientBankAccountHook)
	case boil.BeforeDeleteHook:
		clientBankAccountBeforeDeleteHooks = append(clientBankAccountBeforeDeleteHooks, clientBankAccountHook)
	case boil.AfterDeleteHook:
		clientBankAccountAfterDeleteHooks = append(clientBankAccountAfterDeleteHooks, clientBankAccountHook)
	case boil.BeforeUpsertHook:
		clientBankAccountBeforeUpsertHooks = append(clientBankAccountBeforeUpsertHooks, clientBankAccountHook)
	case boil.AfterUpsertHook:
		clientBankAccountAfterUpsertHooks = append(clientBankAccountAfterUpsertHooks, clientBankAccountHook)
	}
}

// One returns a single clientBankAccount record from the query.
func (q clientBankAccountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ClientBankAccount, error) {
	o := &ClientBankAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for client_bank_accounts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ClientBankAccount records from the query.
func (q clientBankAccountQuery) All(ctx context.Context, exec boil.ContextExecutor) (ClientBankAccountSlice, error) {
	var o []*ClientBankAccount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ClientBankAccount slice")
	}

	if len(clientBankAccountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ClientBankAccount records in the query.
func (q clientBankAccountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count client_bank_accounts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q clientBankAccountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if client_bank_accounts exists")
	}

	return count > 0, nil
}

// Client pointed to by the foreign key.
func (o *ClientBankAccount) Client(mods ...qm.QueryMod) clientQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ClientID),
	}

	queryMods = append(queryMods, mods...)

	return Clients(queryMods...)
}

// LoadClient allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (clientBankAccountL) LoadClient(ctx context.Context, e boil.ContextExecutor, singular bool, maybeClientBankAccount interface{}, mods queries.Applicator) error {
	var slice []*ClientBankAccount
	var object *ClientBankAccount

	if singular {
		var ok bool
		object, ok = maybeClientBankAccount.(*ClientBankAccount)
		if !ok {
			object = new(ClientBankAccount)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeClientBankAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeClientBankAccount))
			}
		}
	} else {
		s, ok := maybeClientBankAccount.(*[]*ClientBankAccount)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeClientBankAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeClientBankAccount))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &clientBankAccountR{}
		}
		if !queries.IsNil(object.ClientID) {
			args = append(args, object.ClientID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clientBankAccountR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ClientID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ClientID) {
				args = append(args, obj.ClientID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`clients`),
		qm.WhereIn(`clients.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Client")
	}

	var resultSlice []*Client
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Client")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for clients")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for clients")
	}

	if len(clientBankAccountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Client = foreign
		if foreign.R == nil {
			foreign.R = &clientR{}
		}
		foreign.R.ClientBankAccounts = append(foreign.R.ClientBankAccounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ClientID, foreign.ID) {
				local.R.Client = foreign
				if foreign.R == nil {
					foreign.R = &clientR{}
				}
				foreign.R.ClientBankAccounts = append(foreign.R.ClientBankAccounts, local)
				break
			}
		}
	}

	return nil
}

// SetClient of the clientBankAccount to the related item.
// Sets o.R.Client to related.
// Adds o to related.R.ClientBankAccounts.
func (o *ClientBankAccount) SetClient(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Client) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"client_bank_accounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"client_id"}),
		strmangle.WhereClause("\"", "\"", 2, clientBankAccountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ClientID, related.ID)
	if o.R == nil {
		o.R = &clientBankAccountR{
			Client: related,
		}
	} else {
		o.R.Client = related
	}

	if related.R == nil {
		related.R = &clientR{
			ClientBankAccounts: ClientBankAccountSlice{o},
		}
	} else {
		related.R.ClientBankAccounts = append(related.R.ClientBankAccounts, o)
	}

	return nil
}

// ClientBankAccounts retrieves all the records using an executor.
func ClientBankAccounts(mods ...qm.QueryMod) clientBankAccountQuery {
	mods = append(mods, qm.From("\"client_bank_accounts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"client_bank_accounts\".*"})
	}

	return clientBankAccountQuery{q}
}

// FindClientBankAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClientBankAccount(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*ClientBankAccount, error) {
	clientBankAccountObj := &ClientBankAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"client_bank_accounts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, clientBankAccountObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from client_bank_accounts")
	}

	if err = clientBankAccountObj.doAfterSelectHooks(ctx, exec); err != nil {
		return clientBankAccountObj, err
	}

	return clientBankAccountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ClientBankAccount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no client_bank_accounts provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clientBankAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	clientBankAccountInsertCacheMut.RLock()
	cache, cached := clientBankAccountInsertCache[key]
	clientBankAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			clientBankAccountAllColumns,
			clientBankAccountColumnsWithDefault,
			clientBankAccountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(clientBankAccountType, clientBankAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(clientBankAccountType, clientBankAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"client_bank_accounts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"client_bank_accounts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into client_bank_accounts")
	}

	if !cached {
		clientBankAccountInsertCacheMut.Lock()
		clientBankAccountInsertCache[key] = cache
		clientBankAccountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ClientBankAccount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ClientBankAccount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	clientBankAccountUpdateCacheMut.RLock()
	cache, cached := clientBankAccountUpdateCache[key]
	clientBankAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			clientBankAccountAllColumns,
			clientBankAccountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update client_bank_accounts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"client_bank_accounts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, clientBankAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(clientBankAccountType, clientBankAccountMapping, append(wl, clientBankAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update client_bank_accounts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for client_bank_accounts")
	}

	if !cached {
		clientBankAccountUpdateCacheMut.Lock()
		clientBankAccountUpdateCache[key] = cache
		clientBankAccountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q clientBankAccountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for client_bank_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for client_bank_accounts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClientBankAccountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clientBankAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"client_bank_accounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, clientBankAccountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in clientBankAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all clientBankAccount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ClientBankAccount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no client_bank_accounts provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clientBankAccountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	clientBankAccountUpsertCacheMut.RLock()
	cache, cached := clientBankAccountUpsertCache[key]
	clientBankAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			clientBankAccountAllColumns,
			clientBankAccountColumnsWithDefault,
			clientBankAccountColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			clientBankAccountAllColumns,
			clientBankAccountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert client_bank_accounts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(clientBankAccountPrimaryKeyColumns))
			copy(conflict, clientBankAccountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"client_bank_accounts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(clientBankAccountType, clientBankAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(clientBankAccountType, clientBankAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert client_bank_accounts")
	}

	if !cached {
		clientBankAccountUpsertCacheMut.Lock()
		clientBankAccountUpsertCache[key] = cache
		clientBankAccountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ClientBankAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ClientBankAccount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ClientBankAccount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), clientBankAccountPrimaryKeyMapping)
	sql := "DELETE FROM \"client_bank_accounts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from client_bank_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for client_bank_accounts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q clientBankAccountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no clientBankAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from client_bank_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for client_bank_accounts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClientBankAccountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(clientBankAccountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clientBankAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"client_bank_accounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, clientBankAccountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from clientBankAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for client_bank_accounts")
	}

	if len(clientBankAccountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ClientBankAccount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindClientBankAccount(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClientBankAccountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClientBankAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clientBankAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"client_bank_accounts\".* FROM \"client_bank_accounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, clientBankAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ClientBankAccountSlice")
	}

	*o = slice

	return nil
}

// ClientBankAccountExists checks if the ClientBankAccount row exists.
func ClientBankAccountExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"client_bank_accounts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if client_bank_accounts exists")
	}

	return exists, nil
}
